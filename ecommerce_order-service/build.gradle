plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'at.backend.drugstore.microservice'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

repositories {
	mavenCentral()
}

def springCloudVersion = "2021.0.3"
def resilience4jVersion = "1.7.0"


ext {
	set('springCloudVersion', "2021.0.4")
}

dependencies {
	// Spring Boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// Postgres
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.postgresql:postgresql'

	// Common Models
	implementation project(':common-models')

	// Postgres
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// AutoMappers
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	implementation 'org.modelmapper:modelmapper:2.4.4'

	// Resilience4j
	implementation "io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}"
	implementation "io.github.resilience4j:resilience4j-all:${resilience4jVersion}"
	implementation "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"
	implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
	implementation "io.github.resilience4j:resilience4j-bulkhead:${resilience4jVersion}"
	implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
	implementation "io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}"
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

	// Eureka
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'

	/* Testing */

	// JUnit Jupiter API for writing tests
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'

	// Mockito for mocking
	testImplementation 'org.mockito:mockito-core:4.0.0'
	testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootRun {
	jvmArgs = []
}

bootJar {
	archiveFileName = 'ecommerce_sale-service.jar'
}